generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  passwordHash String?
  fitResults   FitResult[]
  resumes      ResumeFile[]
  savedJobs    SavedJob[]
}

model JobPosting {
  id              String     @id @default(cuid())
  companyName     String?
  title           String
  url             String     @unique
  description     String?
  requirements    String?
  preferred       String?
  employmentType  String?
  experienceLevel String?
  crawledAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  careerYears     Int[]
  deadline        String?
  jobName         String?
  location        String?
  savedBy         SavedJob[]
}


model SavedJob {
  id           String     @id @default(cuid())
  userId       String
  jobPostingId String
  createdAt    DateTime   @default(now())
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobPostingId])
}

model ResumeFile {
  id           String      @id @default(cuid())
  userId       String
  originalName String
  storedPath   String
  mimeType     String
  size         Int
  createdAt    DateTime    @default(now())
  fitResults   FitResult[]
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FitResult {
  id              String      @id @default(cuid())
  userId          String
  resumeFileId    String?
  jobUrl          String
  score           Int?
  summary         String?
  strengths       String[]    @default([])
  gaps            String[]    @default([])
  recommendations String[]    @default([])
  raw             Json?
  status          String      @default("completed")
  createdAt       DateTime    @default(now())
  resume          ResumeFile? @relation(fields: [resumeFileId], references: [id])
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([jobUrl])
}
